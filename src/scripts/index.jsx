import React from 'react';import _ from 'underscore';import CardDeck from './card-deck';class Wrapper extends React.Component {	constructor(props) {		super(props);		this.state = {			// Dummy data			cards: {				"_5": { text: 'Five', color: '#41D696' },				"_4": { text: 'Four', color: '#E8CC50' },				"_3": { text: 'Three', color: '#0080FF' },				"_2": { text: 'Two', color: '#7F007F' },				"_1": { text: 'One', color: '#FF6666' },			},			// Cards swiped right by the user			accepted: [],			// Cards swiped left by the user			rejected: []		}		_.bindAll( this, 'onSwipe' );	}	onSwipe(cardId, liked) {		let { accepted, rejected, cards } = this.state;		// Move swiped card to the appropriate new pool		liked			? accepted.push( cards[cardId] )			: rejected.push( cards[cardId] );		// Delete that same card from the main pool		delete cards[cardId];		// Update our component, forcing re-render.		this.setState({			cards: cards,			accepted: accepted,			rejected: rejected		}, function() {			if ( ! _.size(cards) ) {				console.log("Stack is empty!");			}		});	}	render() {		return (			<div>				{ !_.size(this.state.cards) ? <p className="empty-msg">All cards swiped!</p> : null }				<CardDeck cards={ this.state.cards } onSwipe={ this.onSwipe } />			</div>		);	}}React.render( <Wrapper />, document.querySelector("#app") );